{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAe,QAC9BC,MAAOF,SAASC,cAAe,kBAC/BE,KAAMH,SAASC,cAAe,iBAC9BG,OAAQJ,SAASC,cAAe,oBA2BhC,SAASI,EAAcC,EAAUJ,GAC/B,IAAMK,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,GACFI,EAAQ,CAACL,WAAUJ,UAErBU,EAAO,CAACN,WAAUJ,S,GACjBA,E,IAhCTJ,EAAKC,KAAKe,iBAAkB,UAE5B,SAAuBC,GACrBA,EAAEC,iBAOF,IALA,IAAgCC,EAAAF,EAAEG,cAC9BC,GAD4BF,EAAxBf,MAAwBe,EAAjBd,KAAiBc,EAAXb,OACJgB,OAAOtB,EAAKI,MAAMmB,QAC/BC,EAAcF,OAAOtB,EAAKM,OAAOiB,OACjCE,EAAYH,OAAOtB,EAAKK,KAAKkB,OAExBG,EAAI,EAAGA,EAAIF,EAAaE,IAC/BnB,EAAcmB,EAAGL,GAChBM,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUJ,EAAKwB,EAALxB,MACjByB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAAN5B,EAAM,OACpE6B,QAAMC,IAAI,uBAAwCF,OAAfxB,EAAS,QAAYwB,OAAN5B,EAAM,M,IAE3D+B,OAAM,SAAAP,G,IAAGpB,EAAQoB,EAARpB,SAAUJ,EAAKwB,EAALxB,MAClByB,EAAA/B,GAASgC,OAAOM,QAAQ,sBAAuCJ,OAAfxB,EAAS,QAAYwB,OAAN5B,EAAM,OACnE6B,QAAMC,IAAI,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAAN5B,EAAM,M,IAE7DiB,GAAcI,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector(`form`),\n  delay: document.querySelector(`[name = delay]`),\n  step: document.querySelector(`[name = step]`),\n  amount: document.querySelector(`[name = amount]`),\n};\n\nrefs.form.addEventListener(`submit`, handlerSubmit);\n\nfunction handlerSubmit(e) {\n  e.preventDefault();\n\n  const { delay, step, amount } = e.currentTarget;\n  let firstDelay = Number(refs.delay.value);\n  let amountCount = Number(refs.amount.value);\n  let stepDelay = Number(refs.step.value);\n\n  for (let i = 1; i < amountCount; i++) {\n    createPromise(i, firstDelay)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\nfirstDelay += stepDelay;\n  };\n  }\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({position, delay});\n        }\n        reject({position, delay});\n      }, delay)\n    });\n  }"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","_currentTarget","currentTarget","firstDelay","Number","value","amountCount","stepDelay","i","then","param","$parcel$interopDefault","Notify","success","concat","console","log","catch","failure"],"version":3,"file":"03-promises.5d32e800.js.map"}